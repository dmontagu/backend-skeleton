#! /usr/bin/env bash
set -e

PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && cd ../.. && pwd)"
cd "${PROJECT_ROOT}"

REVISIONS_ROOT="backend/app/alembic/versions"
CMDNAME=${0##*/}

RESET_REVISIONS=""
SKIP_CONFIRMATION=""
MESSAGE=""

usage() {
  exitcode="$1"
  cat <<USAGE >&2
Usage:
  $CMDNAME [-r] [-y] [-m MESSAGE]

Options:
  -r, --reset              Remove any existing revisions
  -y, --yes                Skip confirmation
  -m, --message MESSAGE    Message to use for autogenerated revision
  -h, --help               Show this message
USAGE
  exit "$exitcode"
}

alembic_autogenerate() {
  if [ -n "$RESET_REVISIONS" ]; then
    reset_revisions
  fi
  REVISION_COUNT=$(find "${REVISIONS_ROOT}" -type f -name '*.py' | wc -l)
  REVISION_INDEX=$(printf "%03d\n" "$REVISION_COUNT")
  if [ -z "$MESSAGE" ]; then
    MESSAGE="revision"
  fi
  MESSAGE="${REVISION_INDEX} ${MESSAGE}"
  docker-compose run --rm backend alembic revision --autogenerate -m "$MESSAGE"
}

confirm() {
  QUESTION=$1
  read -p "$QUESTION y/[n]: " -n 1 -r
  echo ""
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    exit 1
  fi
}

reset_revisions() {
  if [ -z "$SKIP_CONFIRMATION" ]; then
    confirm "This will remove existing revisions and replace the database container. Proceed?"
  fi
  echo "Removing existing revisions"
  rm "${REVISIONS_ROOT}"/*.py >/dev/null 2>&1 || true
  if [ -z "$MESSAGE" ]; then
    MESSAGE="Initial revision"
  fi

  ./scripts/dev/reset-database.sh
}

while [ $# -gt 0 ]; do
  case "$1" in
  -r | --reset)
    RESET_REVISIONS="yes"
    shift 1
    ;;
  -y | --yes)
    SKIP_CONFIRMATION="yes"
    shift 1
    ;;
  -m | --message)
    MESSAGE="$2"
    shift 2
    ;;
  -h | --help)
    usage 0
    ;;
  *)
    echo "Unknown argument: $1"
    usage 1
    ;;
  esac
done

alembic_autogenerate
